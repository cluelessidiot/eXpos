alias functionNum R1;
if(functionNum == 3) then
       alias inodeIndex R4;
	   R4 = 0;
	while (inodeIndex < 60) do
		if ([INODE_TABLE + 16 * inodeIndex + 1] == filename) then
			if ([INODE_TABLE + 16 * inodeIndex] != EXEC) then
				break;
			endif;
		endif;
		inodeIndex = inodeIndex + 1;
	endwhile;
	if(inodeIndex == 60) then //not data or inode entry not found
		R0 = -1;
		return;
        endif;

       	multipush(R1,R2,R3,R4,R6);
          R1=4; //acqiure inode............
          R2=inodeIndex;
          call MOD_0;
	    multipop(R1,R2,R3,R4,R6);
         if(R0!=0) then
            return;
	     endif;	
	alias count R5=0;
	while([OPEN_FILE_TABLE+4*R6]!=0 && count<32)	do
	  count=count+1;
	  endwhile;
	  if(count==32) then
	      	multipush(R1,R2,R3,R4,R6);
            R1=5 ;//release acqiure inode............
          	R2=inodeIndex;
          	call MOD_0;
		    multipop(R1,R2,R3,R4,R6);
	        R0=-2;
		    return;
	  endif;	
	  if(R2=="root") then
	   	[OPEN_FILE_TABLE+4*count]="INODE_ROOT";
	  else
	       	if([FILE_STATUS_TABLE+4*count+1]==-1) then
	       	    [FILE_STATUS_TABLE+4*count+1]=1;
	       	else
	       	    [FILE_STATUS_TABLE+4*count+1]=[FILE_STATUS_TABLE+4*count+1]+1;    
	       endif; 
	        [OPEN_FILE_TABLE+4*count]=inodeIndex;
	        
	  endif;
[OPEN_FILE_TABLE+4*R6+1]=1; //open instance count and lseek
[OPEN_FILE_TABLE+4*R6+2]=0;	         
         	multipush(R1,R2,R3,R4,R6);
            R1=5 ;//release acqiure inode............
          	R2=inodeIndex;
			R3=[SYSTEM_STATUS_TABLE+1];  
          	call MOD_0;
		    multipop(R1,R2,R3,R4,R6);	        
	        R0=count;
	        return;
endif;	        
if (functionNum == 4) then				//close
	alias filetableindex R2;
	alias inodeindex R3;
	inodeindex = [OPEN_FILE_TABLE + 4 * filetableindex];
	[OPEN_FILE_TABLE + 4 * filetableindex + 1] = [OPEN_FILE_TABLE + 4 * filetableindex + 1] - 1;
	if ([OPEN_FILE_TABLE + 4 * filetableindex + 1] == 0) then
		if ([OPEN_FILE_TABLE + 4 * filetableindex] != INODE_ROOT) then
			alias counter R4;
			counter = [OPEN_FILE_TABLE + 4 * filetableindex];
			[FILE_STATUS_TABLE + 4 * counter + 1] = [FILE_STATUS_TABLE + 4 * counter + 1] - 1;
			if ([FILE_STATUS_TABLE + 4 * counter + 1] == 0) then
				[FILE_STATUS_TABLE + 4 * counter + 1] = -1;
			endif;
		endif;
		[OPEN_FILE_TABLE + 4 * filetableindex + 0] = -1;
		[OPEN_FILE_TABLE + 4 * filetableindex + 1] = -1;
		[OPEN_FILE_TABLE + 4 * filetableindex + 2] = -1;
	endif;
	return;
endif;
if (functionNum == 2) then				//buffer read
	alias diskblock R2;
	alias offset R3;
	alias word R4;
	alias bufferpage R5;
	bufferpage = diskblock % 4;
	multipush(R1,R2,R3,R4,R5);
	R1 = 1;
	R2 = R5;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);
	if ([BUFFER_TABLE + 4 * bufferpage] != diskblock) then
		if ([BUFFER_TABLE + 4 * bufferpage + 1] == 1) then		//dirty
			multipush(R1,R2,R3,R4,R5);
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = 71 + bufferpage;
			R4 = [BUFFER_TABLE + 4 * bufferpage];
			call MOD_4;
			multipop(R1,R2,R3,R4,R5);
			[BUFFER_TABLE + 4 * bufferpage + 1] = 0;
		endif;
		multipush(R1,R2,R3,R4,R5);
		R1 = 2;
		R4 = diskblock;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = 71 + bufferpage;
		call MOD_4;
		multipop(R1,R2,R3,R4,R5);
		[BUFFER_TABLE + 4 * bufferpage] = diskblock;
	endif;
	[([PTBR + 2*(word/512)])*512 + (word%512)] = [(71 + bufferpage) * 512 + offset];
	[BUFFER_TABLE + 4 * bufferpage+1] = 1;
	multipush(R1,R2,R3,R4,R5);
	R1 = 2;
	R2 = R5;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);
	return;
endif;
