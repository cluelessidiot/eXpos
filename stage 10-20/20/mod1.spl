alias functionNum R1;
alias currentPID R2;
//free userareapage
if(functionNum==2) then
 multipush(R1,R2);
 R1=2;
 R2=[PROCESS_TABLE + currentPID * 16 + 11];
 call MOD_2;
 multipop(R1,R2);
 return;
endif;
//exit process
if(functionNum==3) then
 backup;
 R1=4;
//breakpoint;
 call MOD_1;
 restore;
 backup;
 R1=2;
 call MOD_1;
 restore;
 [PROCESS_TABLE + currentPID * 16 + 4]=TERMINATED;
 return;
endif;
//free page table
if(functionNum==4) then
 //free lib pages
 [PAGE_TABLE_BASE +currentPID*20+0]=-1;
 [PAGE_TABLE_BASE +currentPID*20+1]="0000";
 [PAGE_TABLE_BASE +currentPID*20+2]=-1;
 [PAGE_TABLE_BASE +currentPID*20+3]="0000";
 //releasing each valid entry in page table
 backup;
 R3=5;
 while(R3<16) do
   if([PAGE_TABLE_BASE +currentPID*20+R3]!="0000") then
	multipush(R1,R2,R3);
	R1=2;
	R2=[PAGE_TABLE_BASE +currentPID*20+R3-1];        
	call MOD_2;
	multipop(R1,R2,R3);
	[PAGE_TABLE_BASE +currentPID*20+R3]="0000";
   endif;
   R3=R3+2;
 endwhile;
restore;
 //CALLING RELEASE BLOCK FOR STACK AND HEAP
if([DISK_MAP_TABLE +currentPID*10 +2]!=-1) then
 backup;
 R2=[DISK_MAP_TABLE +currentPID*10 +2];
 R1=4;
 R3= [SYSTEM_STATUS_TABLE+1];
 call MOD_2;
 restore;
endif;
if([DISK_MAP_TABLE +currentPID*10 +3]!=-1) then
 backup;
 R2=[DISK_MAP_TABLE +currentPID*10 +3];
 R1=4;
 R3= [SYSTEM_STATUS_TABLE+1];
 call MOD_2;
 restore;
endif;
if([DISK_MAP_TABLE +currentPID*10 +8]!=-1) then
 backup;
 R2=[DISK_MAP_TABLE +currentPID*10 +8];
 R1=4;
 R3= [SYSTEM_STATUS_TABLE+1];
 call MOD_2;
 restore;
endif;
if([DISK_MAP_TABLE +currentPID*10 +9]!=-1) then
 backup;
 R2=[DISK_MAP_TABLE +currentPID*10 +9];
 R1=4;
 R3= [SYSTEM_STATUS_TABLE+1];
 call MOD_2;
 restore;
endif;
R4=0;
while(R4<10) do
 [DISK_MAP_TABLE+currentPID*10+R4]=-1;
 R4=R4+1;
endwhile;
return;
endif;
//get pcb entry
if(functionNum==1) then
 R3=0;
 while(R3<16) do
  if([PROCESS_TABLE + R3*16 + 4]==TERMINATED) then
    break;
  endif;
  R3=R3+1;
 endwhile;
if(R3==16) then
R0=-1;
return;
endif;
[PROCESS_TABLE+R3*16+1]=R3;
[PROCESS_TABLE+R3*16+14]=PAGE_TABLE_BASE+R3*20;
[PROCESS_TABLE+R3*16+15]=10;
R0=R3;
return;
endif;
