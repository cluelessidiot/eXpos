alias functionNum R1;
alias currentPID R2;

if(functionNum == 3) then
	while([DISK_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;		
	return;
endif;

if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;
		multipush(R1, R2, R3);
		call MOD_5;
		multipop(R1, R2, R3);
	endwhile;
	[TERMINAL_STATUS_TABLE + 0] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;

if(functionNum == 9) then
	if([TERMINAL_STATUS_TABLE + 1] != currentPID) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE + 0] = 0;
	alias temp R4;
	temp = 1;
	while(temp <= 15) do
		if([PROCESS_TABLE + (temp*16) + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + (temp*16) + 4] = READY;
		endif;
		temp = temp + 1;
	endwhile;
	R0 = 0;
	return;
endif;
//acquire inode 
if(functionNum==4) then
    alias index R2;
    alias id R3;
    while([FILE_STATUS_TABLE+index*4+0]!=-1) do
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_FILE;
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5] = index;
        backup;
        call MOD_5;
        restore;
    endwhile;
    if([INODE_TABLE+index*16+1]==-1) then
        R0=-1;
        return;
    endif;
    [FILE_STATUS_TABLE+index*4+0]=id;
    R0=0;
    return;
endif;
//release lock
if(functionNum==5) then
    alias index R2;
    alias id R3;
    if(id!=[FILE_STATUS_TABLE+index*4]) then
        R0=-1;
        return;
    endif;
    [FILE_STATUS_TABLE+index*4]=-1;
    R4=0;
    while(R4<16) do
        if([PROCESS_TABLE+R4*16+4]==WAIT_FILE && [PROCESS_TABLE+R4*16+5]==index) then
            [PROCESS_TABLE+R4*16+4]=READY;
        endif;
        R4=R4+1;
    endwhile;
	R0=0;
    return;
endif;
//acquire semaphore
if(functionNum == 6) then
	R4 = 0;
	while(R4 < 32) do
		if([SEMAPHORE_TABLE + (4*R4) + 1] == 0) then
			break;
		endif;
		R4 = R4 + 1;
	endwhile;
	if(R4 == 32) then
		R0 = -1;
	else
		R0 = R4;
		[SEMAPHORE_TABLE + (4*R4) + 1] = 1;
		[SEMAPHORE_TABLE + (4*R4)] = -1;	
	endif;
	return;
endif;
//release semaphores................
if(functionNum == 7) then
if([SEMAPHORE_TABLE + (4*R3)] != currentPID) then  ...............
	if([SEMAPHORE_TABLE + (4*R3)] == currentPID) then
		[SEMAPHORE_TABLE + (4*R3)] = -1;
		R4 = 0;
		while(R4 < 16) do
			if(([PROCESS_TABLE + (R4*16) + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + (R4*16) + 5] == R3)) then
				[PROCESS_TABLE + (R4*16) + 4] = READY;
			endif;
			R4 = R4 + 1;
		endwhile;
	endif;
	[SEMAPHORE_TABLE + (4*R3) + 1] = [SEMAPHORE_TABLE + (4*R3) + 1] - 1;
	return;
endif;
