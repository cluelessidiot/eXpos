[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 8;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 - 1;
R1 = 1;				//get pcb entry for child process
call MOD_1;
alias childpid R1;
childpid = R0;					//child pid is returned by get pcb entry
if (childpid == -1) then		//failed
	alias physicalAddrRetVal R3;
	physicalAddrRetVal = ([PTBR + 2 * (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] - 1) / 512)] * 512) + (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] - 1) % 512);
	[physicalAddrRetVal] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;
//get page 2 + 1 stack,userarea pages
multipush(R1);
R1 = 1;
call MOD_2;				//get free page for stack
multipop(R1);
[PAGE_TABLE_BASE + 20*childpid + 16] = R0;
[PAGE_TABLE_BASE + 20*childpid + 17] = "0110";
multipush(R1);
R1 = 1;
call MOD_2;				//get free page for stack
multipop(R1);
[PAGE_TABLE_BASE + 20*childpid + 18] = R0;
[PAGE_TABLE_BASE + 20*childpid + 19] = "0110";
multipush(R1);
R1 = 1;
call MOD_2;				//get free page for user area page
multipop(R1);
alias temp R15;
temp = PROCESS_TABLE + childpid * 16;
[temp + 11] = R0;			//User area page
[temp + 3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3];					//userid
[temp + 6] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 6];			//swap flag
[temp + 10] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 10];		//userareaswapstatus
[temp + 7] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7];			//Inode index
[temp + 13] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];			//UPTR
[temp + 9] = 0;				//Mode flag
[temp + 0] = 0;				//TICK
[temp + 12] = 0;			//KTPR
[temp + 2] = [SYSTEM_STATUS_TABLE + 1];	//PPID
[temp + 4] = CREATED;			//State
alias UserAreaPagep R2;
alias UserAreaPagec R3;
alias counter R4;
UserAreaPagep = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);		//perprocess table
UserAreaPagec = ([PROCESS_TABLE + (childpid * 16) + 11]) * 512 + (512 - 16);
counter = 0;
while(counter < 16) do
	[UserAreaPagec + counter] = [UserAreaPagep + counter];
	[UserAreaPagec + counter + 1] = [UserAreaPagep + counter + 1];
	alias temp R15;
	temp = 4 * [UserAreaPagep + counter + 1];							//just to reduce
	if ([UserAreaPagep + counter] == SEMAPHORE) then					//if semaphore then increase the process count
		[SEMAPHORE_TABLE + temp + 1] = [SEMAPHORE_TABLE + temp + 1] + 1;
	endif;
	if ([UserAreaPagep + counter] == FILE) then					//if file
		[OPEN_FILE_TABLE + temp + 1] = [OPEN_FILE_TABLE + temp + 1] + 1;
	endif;
	counter = counter + 2;
endwhile;
//
//
//TODO if heap page not allocated then allocate heap pages to parent
//
//
alias pagenum R7;
//alias temp R15;
counter = 0;
while(counter < 16) do				//uptil stack page
	temp = PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + counter;
	if(counter % 2 == 0) then
		pagenum = [temp];
		if (pagenum == -1) then					//only for heap pages
			multipush(R1,R4,R7,R15);
			R1 = 1;
			call MOD_2;
			multipop(R1,R4,R7,R15);
			pagenum = R0;
			[temp] = R0;
			[temp + 1] = "0110";
		endif;
		[MEMORY_FREE_LIST + pagenum] = [MEMORY_FREE_LIST + pagenum] + 1;
	endif;
	[PAGE_TABLE_BASE + 20*childpid + counter] = [temp];
	counter = counter + 1;
endwhile;
counter = 0; 					//Disk map table
while(counter < 10) do
	[DISK_MAP_TABLE + childpid*10 + counter] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + counter];
	counter = counter + 1;
endwhile;
//copy stack pages word by word
alias stack1p R2;
alias stack2p R3;
alias stack1c R5;
alias stack2c R6;
stack1p = ([PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 16] * 512);
stack2p = ([PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 18] * 512);
stack1c = ([PAGE_TABLE_BASE + 20*childpid + 16] * 512);
stack2c = ([PAGE_TABLE_BASE + 20*childpid + 18] * 512);
counter = 0;
while (counter < 512) do
	[stack1c + counter] = [stack1p + counter];
	[stack2c + counter] = [stack2p + counter];
	counter = counter + 1;
endwhile;
//return value for child process
alias stack R3;
alias ptbr R4;
stack = [PROCESS_TABLE + (childpid * 16) + 13];
ptbr = [PROCESS_TABLE + (childpid * 16) + 14];
[[ptbr + 2 * ((stack - 1) / 512)] * 512 + ((stack - 1) % 512)] = 0;
//return value for parent process
stack = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[[PTBR + 2 * ((stack - 1) / 512)] * 512 + ((stack - 1) % 512)] = childpid;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
//putting BP register on top of child kernel stack
[[PROCESS_TABLE + (childpid * 16) + 11]*512] = BP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
//print("Fork");
//breakpoint;
ireturn;