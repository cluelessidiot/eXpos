alias functionNum R1;
alias i R5;
if(functionNum == 1) then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	while([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 4] = WAIT_MEM;
		multipush(R1);
		call MOD_5;
		multipop(R1);
	endwhile;
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	i = 0;
	while(i < 128) do
		if([MEMORY_FREE_LIST + i] == 0) then
			[MEMORY_FREE_LIST + i] = 1;
			R0 = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	return;	
endif;

if(functionNum == 2) then
	alias pageNum R2;
	[MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;
	if([MEMORY_FREE_LIST + pageNum] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	R3 = 0;
	while(R3 < 16) do
		if([PROCESS_TABLE + (R3*16) + 4] == WAIT_MEM) then
			[PROCESS_TABLE + (R3*16) + 4] = READY;
		endif;
		R3 = R3 + 1;
	endwhile;
	return;
endif;

if(functionNum == 4) then
	[DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
	return;
endif;
if(functionNum==)
if(functionNum == 5qw) then
	R3 = 0;
	R5 = 0;
	while(R3 < 16) do
		R4 = 4;
		while(R4 <= 7) do
			if(([DISK_MAP_TABLE + (R3*10) + R4] == R2) && ([PAGE_TABLE_BASE + (R3*20) + (R4*2)] != -1)) then
				R0 = [PAGE_TABLE_BASE + (R3*20) + (R4*2)];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				R5 = 1;
				return;
			endif; 
			R4 = R4 + 1;
		endwhile;
		R3 = R3 + 1;
	endwhile;
	if(R5 == 0) then
		multipush(R1,R2,R3,R4,R5);
		R1 = 1;
		call MOD_2;
		multipop(R1,R2,R3,R4,R5);
		multipush(R0,R1,R2,R3,R4,R5);
		R1 = 2;
		R4 = R2;
		R3 = R0;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5);
		return;
	endif;
endif;
