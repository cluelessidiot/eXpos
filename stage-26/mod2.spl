alias functionNum R1;
if (functionNum == 1) then			//Get Free Page
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;	//wait mem count 
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		call MOD_5;
	endwhile;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; 
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	alias counter R0;
	counter = 76;
	while (counter < 128) do
		if ([MEMORY_FREE_LIST + counter] == 0) then
			[MEMORY_FREE_LIST + counter] = 1;
			return;
		endif;
		counter = counter + 1;
	endwhile;
endif;
if (functionNum == 2) then			//Release Page	
	alias PageNum R2;
	[MEMORY_FREE_LIST + PageNum] = [MEMORY_FREE_LIST + PageNum] - 1;
	if ([MEMORY_FREE_LIST + PageNum] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	alias counter R3;
	counter = 1;
	while (counter < 16) do
		if ([PROCESS_TABLE + (counter * 16) + 4] == WAIT_MEM) then
			[PROCESS_TABLE + (counter * 16) + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	return;
endif;
if (functionNum == 3) then			//Get free block
	alias counter R0;
	counter = DISK_FREE_AREA;
	while (counter < DISK_SWAP_AREA) do
		if ([DISK_FREE_LIST + counter] == 0) then
			[DISK_FREE_LIST + counter] = 1;
			return;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = -1;
	return;
endif;
if (functionNum == 4) then			//Release Block
	alias BlockNum R2;
	alias pid R3;
	[DISK_FREE_LIST + BlockNum] = 0;
	return;
endif;
if (functionNum == 5) then			//Get Code Page
	alias BlockNum R2;
	alias counter R3;
	alias index R4;
	counter = 1;
	while(counter < 16) do
		index = 4;
		while(index < 8) do
			if ([DISK_MAP_TABLE + counter*10 + index] == BlockNum) then
				if ([PAGE_TABLE_BASE + counter*20 + index*2 + 1] == "0100" || [PAGE_TABLE_BASE + counter*20 + index*2 + 1] == "1100") then		//check if valid
					R0 = [PAGE_TABLE_BASE + counter*20 + index*2];
					[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1; //Memory free list
					return;
				endif;
			endif;
			index = index + 1;
		endwhile;
		counter = counter + 1;
	endwhile;
	multipush(R1,R2);
	R1 = 1;
	call MOD_2;
	multipop(R1,R2);
	multipush(R0,R1,R2);
	R1 = 2;
	R4 = R2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = R0;
	call MOD_4;
	multipop(R0,R1,R2);
	return;
endif;