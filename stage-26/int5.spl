//===========================================================================
//	Outdated
//	R0 - userSP
//	R1 - Physical page number 	, address of filename
//	R2 - offset					,file name	,filedescriptor
//	R3 - call num address		, counter
//	R4 - syscall number
//	R5 - return address
//	R6 - perprocess table
//	R7 - file index
//	R8 - temp flag to check whether the file is present on the disk or not
//	R9 - free slot in inode table
//	R10 - physicalAddrRetVal
//	R11 - INODE_TABLE + freeentry * 16;
//	R12 - ROOT_FILE + freeentry * 8
//	R13 - iterator
// 	R14 - temp
//	R15 - counter
//===========================================================================
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
alias userSP R0;
userSP=SP;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 - 1;
alias PhysicalPageNum R1;							//Extracting arguement 
alias offset R2;
alias CallNumAdd R3;
PhysicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
CallNumAdd = (PhysicalPageNum * 512) + offset;
alias SyscallNumber R4;
SyscallNumber = [CallNumAdd];
//return address
alias physicalAddrRetVal R5;
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
alias perprocesstable R6;
perprocesstable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
if (SyscallNumber == 2) then			//Open
	[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 2;
	R1 = ([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512);
	alias filename R2;
	filename = [R1];
	alias counter R1;
	alias flag R3;
	flag = 0;
	counter = 0;
	while(counter < 16) do								//find a free entry in perprocesstable
		if([perprocesstable + counter] == -1) then
			flag = 1;
			break;
		endif;
		counter = counter + 2;
	endwhile;
	if (flag != 1) then
		[physicalAddrRetVal] = -3;				//perprocesstable full
	endif;
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R1 = 3;
	R2 = filename;
	call MOD_3;									//get open file id
	R7 = R0;
	multipop(R0,R1,R2,R3,R4,R5,R6);
	if (R7 < 0) then
		[physicalAddrRetVal] = R7;
	else
		[perprocesstable + counter] = FILE;
		[perprocesstable + counter + 1] = R7;		//return value of open file manager
		[physicalAddrRetVal] = (counter / 2);		//index of perprocess table entry
	endif;
endif;
if (SyscallNumber == 3) then				//Close
	[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 3;
	R1 = ([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512);
	alias filedescriptor R2;
	filedescriptor = [R1];
	if (filedescriptor == -1) then
		[physicalAddrRetVal] = -1;
	else
		if ([perprocesstable + 2 * filedescriptor] != FILE)	then
			[physicalAddrRetVal] = -1;
		else
			multipush(R0,R1,R2,R3,R4,R5,R6);
			R1 = 4;
			R2 = [perprocesstable + 2 * filedescriptor + 1];
			call MOD_3;											//close
			multipop(R0,R1,R2,R3,R4,R5,R6);
			[perprocesstable + 2 * filedescriptor] = -1;
		endif;
	endif;
endif;
if (SyscallNumber == 6) then								//seek
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 6;
	R1 = ([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512);
	alias filedescriptor R2;
	filedescriptor = [R1];
	if (filedescriptor == -1) then
		[physicalAddrRetVal] = -1;
	else
		if ([perprocesstable + 2 * filedescriptor] != FILE)	then
			[physicalAddrRetVal] = -1;
		else
			alias fileindex R7;
			alias inodeindex R8;
			fileindex = [perprocesstable + 2 * filedescriptor + 1];
			inodeindex = [OPEN_FILE_TABLE + 4 * fileindex];
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
			R1 = 4;
			R2 = inodeindex;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;									//acquire
			R9 = R0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
			if (R9 == -1) then
				[physicalAddrRetVal] = -1;
			else
				alias lseek R9;
				alias filesize R10;
				lseek = [OPEN_FILE_TABLE + 4 * fileindex + 2];
				if (inodeindex == INODE_ROOT) then
					filesize = 480;
				else
					filesize = [INODE_TABLE + inodeindex * 16 + 2];
				endif;
				alias goffset R11;
				R1 = ([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512);
				goffset = [R1];
				if (lseek + goffset < 0) then
					[physicalAddrRetVal] = -1;
				else
					if (goffset == 0) then
						[OPEN_FILE_TABLE + 4 * fileindex + 2] = 0;
					else
						if (lseek + goffset >= filesize) then
							[OPEN_FILE_TABLE + 4 * fileindex + 2] = filesize - 1;
						else
							[OPEN_FILE_TABLE + 4 * fileindex + 2] = lseek + goffset;
						endif;
					endif;
					//print([OPEN_FILE_TABLE + 4 * fileindex + 2]);
					[physicalAddrRetVal] = 0;
				endif;
				//release
				multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
				R1 = 5;
				R2 = inodeindex;
				R3 = [SYSTEM_STATUS_TABLE + 1];
				call MOD_0;										//release
				multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			endif;
		endif;
	endif;
endif;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;